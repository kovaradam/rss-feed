datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  requestedEmail String? @unique
  isAdmin        Boolean @default(false)
  soundsAllowed  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  channels    Channel[]
  collections Collection[]
  passkeys    WebAuthnCredential[]
  sessions    Session[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Channel {
  id          String @id @default(cuid())
  link        String
  title       String
  description String
  feedUrl     String

  lastBuildDate DateTime?
  rssVersion    String
  category      String
  copyright     String
  language      String

  refreshDate           DateTime?
  itemPubDateParseError Boolean?

  items    Item[]
  imageUrl String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([feedUrl, userId])
}

model Item {
  id          String   @id @default(cuid())
  link        String
  title       String
  description String
  pubDate     DateTime

  author   String
  comments String

  bookmarked     Boolean @default(false)
  read           Boolean @default(false)
  hiddenFromFeed Boolean @default(false)
  imageUrl       String

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  quotes Quote[]

  @@unique([id, channelId])
}

model Image {
  url   String @id
  title String
  link  String

  channelLink String
}

model Collection {
  id    String @id @default(cuid())
  title String

  read       Boolean?
  bookmarked Boolean?
  language   String?
  category   String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model FailedChannelUpload {
  link  String @id
  error String
}

model Quote {
  id      String @id @default(cuid())
  content String

  createdAt DateTime @default(now())

  itemId String
  item   Item   @relation(fields: [itemId], references: [id])
}

model WebAuthnChallenge {
  email     String   @id()
  createdAt DateTime @default(now())
  challenge String
}

model WebAuthnCredential {
  id           String    @id() @default(cuid())
  credentialId String
  createdAt    DateTime  @default(now())
  publicKey    Bytes
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  lastUsedAt   DateTime?
  counter      Int
  deviceType   String
  transports   String?
}

model Session {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}
